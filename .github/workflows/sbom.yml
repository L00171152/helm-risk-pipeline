name: Helm Chart Security Scan

on:
  pull_request:
    branches: ["*"]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  scan-helm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Helm
        uses: azure/setup-helm@v4

      - name: Install Trivy & yq (user space)
        run: |
          set -e
          mkdir -p "$HOME/.local/bin"
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh \
            | sh -s -- -b "$HOME/.local/bin"
          curl -L "https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64" \
            -o "$HOME/.local/bin/yq"
          chmod +x "$HOME/.local/bin/yq"
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          trivy --version
          yq --version

      - name: Find modified Helm charts
        id: charts
        shell: bash
        run: |
          set -euo pipefail
          BASE="${{ github.event.pull_request.base.ref }}"
          git fetch origin "$BASE"
          dirs=$(git diff --name-only "origin/$BASE"...HEAD | grep -E '^charts/.+/Chart\.ya?ml$' | xargs -r -n1 dirname | sort -u)
          echo "dirs=$dirs" >> "$GITHUB_OUTPUT"
          echo "Changed charts:"; echo "$dirs"

      - name: Scan charts (values-only image scan)
        if: ${{ steps.charts.outputs.dirs != '' }}
        shell: bash
        run: |
          set -euo pipefail

          extract_imgs () {
            yq -r '
              # image: "repo:tag"
              (.. | select(type=="object" and has("image") and (.image|type=="!!str")) | .image),
              # image: {repository, tag}
              (.. | select(type=="object" and has("image") and (.image|type=="!!map")
                           and (.image|has("repository")) and (.image|has("tag")))
                   | (.image.repository + ":" + (.image.tag|tostring))),
              # image: {repository} only -> assume :latest
              (.. | select(type=="object" and has("image") and (.image|type=="!!map")
                           and (.image|has("repository")) and ((.image|has("tag"))|not))
                   | (.image.repository + ":latest")),
              # legacy repo/tag split
              (.. | select(type=="object" and has("repository") and has("tag"))
                   | (.repository + ":" + (.tag|tostring)))
            ' "$1" 2>/dev/null | sed '/^$/d' || true
          }

          SUMMARY=risk-summary.txt
          : > "$SUMMARY"

          for CHART in ${{ steps.charts.outputs.dirs }}; do
            echo "==> Processing $CHART"

            # Ensure subcharts present (covers Renovate bumps)
            helm dependency update "$CHART" || helm dependency build "$CHART"

            TMP=$(mktemp -d)
            OUT="$TMP/images.txt"; : > "$OUT"

            # main chart values
            find "$CHART" -maxdepth 1 -type f \( -name 'values*.yaml' -o -name 'values*.yml' \) -print0 \
              | while IFS= read -r -d '' f; do extract_imgs "$f" >> "$OUT"; done

            # subchart values (dirs)
            find "$CHART/charts" -type f \( -name 'values*.yaml' -o -name 'values*.yml' \) 2>/dev/null -print0 \
              | while IFS= read -r -d '' f; do extract_imgs "$f" >> "$OUT"; done

            # subchart archives
            shopt -s nullglob
            for tgz in "$CHART"/charts/*.tgz; do
              helm show values "$tgz" > "$TMP/vals.yaml" || true
              extract_imgs "$TMP/vals.yaml" >> "$OUT"
            done

            sort -u "$OUT" | sed '/^$/d' > "$TMP/images.sorted"
            echo "Images for $CHART:"; cat "$TMP/images.sorted" || true

            REPORT="trivy-$(basename "$CHART").json"
            : > "$REPORT"

            if [ -s "$TMP/images.sorted" ]; then
              mkdir -p /tmp/trivy
              rm -f /tmp/trivy/*.json 2>/dev/null || true
              while read -r img; do
                echo "Scanning $img"
                safe=$(echo "$img" | tr '/:' '__')
                trivy image --scanners vuln --ignore-unfixed \
                  --format json --output "/tmp/trivy/${safe}.json" "$img" || true
              done < "$TMP/images.sorted"
              jq -s '.' /tmp/trivy/*.json > "$REPORT" || echo '{}' > "$REPORT"
            else
              echo '{}' > "$REPORT"
            fi

            # tiny inline summary
            echo "### $(basename "$CHART")" >> "$SUMMARY"
            jq -r '
              def vulns: [.[]? | .Results[]? | select(.Vulnerabilities) | .Vulnerabilities[]];
              "Images: " + ( [.[].Results[]? | .Target] | unique | length | tostring ) + "\n" +
              "HIGH: " + ( [vulns[] | select(.Severity=="HIGH")] | length | tostring ) + ", " +
              "CRITICAL: " + ( [vulns[] | select(.Severity=="CRITICAL")] | length | tostring )
            ' "$REPORT" >> "$SUMMARY"
            echo "" >> "$SUMMARY"
          done

          cat "$SUMMARY" > risk_summary.txt

      - name: Comment on PR with summary
        if: ${{ steps.charts.outputs.dirs != '' && github.event.pull_request.head.repo.full_name == github.repository }}
        uses: marocchino/sticky-pull-request-comment@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          path: risk_summary.txt
          recreate: true

      - name: Upload artifacts
        if: ${{ steps.charts.outputs.dirs != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-*.json
