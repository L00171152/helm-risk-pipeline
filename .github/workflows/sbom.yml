name: Helm Image Vulnerability Scan

on:
  pull_request:
    paths:
      - 'charts/**'

permissions:
  contents: read
  pull-requests: write    # for PR comment
  issues: write           # ok for forks too

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Helm
        uses: azure/setup-helm@v4

      - name: Install Trivy (user space)
        run: |
          set -e
          mkdir -p "$HOME/.local/bin"
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh \
            | sh -s -- -b "$HOME/.local/bin"
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          trivy --version

      - name: Find modified Helm charts
        id: charts
        shell: bash
        run: |
          set -euo pipefail
          BASE="${{ github.event.pull_request.base.ref }}"
          git fetch origin "$BASE" --depth=1
          dirs=$(git diff --name-only "origin/$BASE"...HEAD \
                 | grep -E '^charts/.+/Chart\.ya?ml$' \
                 | xargs -r -n1 dirname | sort -u)
          echo "dirs=$dirs" >> "$GITHUB_OUTPUT"
          echo "Changed charts:"; echo "$dirs"

      - name: Scan images in changed charts
        if: ${{ steps.charts.outputs.dirs != '' }}
        shell: bash
        run: |
          set -euo pipefail
          SUMMARY="risk_summary.txt"
          : > "$SUMMARY"

          for CHART in ${{ steps.charts.outputs.dirs }}; do
            echo "==> Processing $CHART"
            helm dependency update "$CHART" || helm dependency build "$CHART"

            RENDERED=$(mktemp)
            if ! helm template "$CHART" \
                  --dependency-update \
                  --set serviceAccount.create=true \
                  --set ingress.enabled=false \
                  --set autoscaling.enabled=false > "$RENDERED"; then
              echo "::warning title=Helm render failed::Skipping $CHART (render error)"
              continue
            fi

            IMAGES=$(grep -Eo 'image:\s*["'\'']?[^"'\''[:space:]]+(:[[:alnum:]\.\-_]+)?' "$RENDERED" \
                     | awk '{print $2}' | sed 's/"//g' | sort -u || true)
            echo "Images for $CHART:"; echo "$IMAGES"

            REPORT="trivy-$(basename "$CHART").json"
            : > "$REPORT"

            if [ -n "$IMAGES" ]; then
              mkdir -p /tmp/trivy
              rm -f /tmp/trivy/*.json 2>/dev/null || true
              for img in $IMAGES; do
                echo "Scanning $img"
                safe=$(echo "$img" | tr '/:' '__')
                trivy image --scanners vuln --severity HIGH,CRITICAL \
                  --format json --output "/tmp/trivy/${safe}.json" "$img" || true
              done
              jq -s '.' /tmp/trivy/*.json > "$REPORT" || echo '{}' > "$REPORT"
            else
              echo '{}' > "$REPORT"
            fi

            echo "### $(basename "$CHART")" >> "$SUMMARY"
            jq -r '
              def vulns: [.[]? | .Results[]? | .Vulnerabilities[]?];
              "Images: " + ( [.[].Results[]? | .Target] | unique | length | tostring ) + "\n" +
              "HIGH: " + ( [vulns[] | select(.Severity=="HIGH")] | length | tostring ) + ", " +
              "CRITICAL: " + ( [vulns[] | select(.Severity=="CRITICAL")] | length | tostring )
            ' "$REPORT" >> "$SUMMARY"
            echo "" >> "$SUMMARY"
          done

          # no cp needed anymore
          test -s "$SUMMARY" || echo "No charts with images found." > "$SUMMARY"


      # Optional: fail the job if any HIGH/CRITICAL are found (uncomment to enforce)
      # - name: Fail when HIGH/CRITICAL found
      #   if: ${{ steps.charts.outputs.dirs != '' }}
      #   shell: bash
      #   run: |
      #     set -euo pipefail
      #     H=$(jq '[.[]? | .Results[]? | .Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-*.json 2>/dev/null | paste -sd+ - | bc || echo 0)
      #     C=$(jq '[.[]? | .Results[]? | .Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-*.json 2>/dev/null | paste -sd+ - | bc || echo 0)
      #     echo "HIGH=$H CRITICAL=$C"
      #     if [ "${H:-0}" -gt 0 ] || [ "${C:-0}" -gt 0 ]; then
      #       echo "::error::Found $H HIGH and $C CRITICAL vulnerabilities"
      #       exit 1
      #     fi

      - name: Comment summary on PR
        if: ${{ steps.charts.outputs.dirs != '' && github.event.pull_request.head.repo.full_name == github.repository }}
        uses: marocchino/sticky-pull-request-comment@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          path: risk_summary.txt
          recreate: true

      - name: Upload reports
        if: ${{ steps.charts.outputs.dirs != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: trivy-*.json
          retention-days: 14
